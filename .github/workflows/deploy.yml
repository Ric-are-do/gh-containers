name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest

    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb
      MONGODB_CLUSTER_ADDRESS: mongo # since we are using a service called mongo we can use this as the address to connect to the db - remember that github actions will set this up in a network where the jobs and services can communicate with each other using their names as the address (NB this only works for services running in containers)
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      PORT: 8080

    # to put a job and its steps into a container, you simply add the container key -> you then add the images you want to add but in order to do this they must be public images ie like on dockerhub
    # you use the following syntax since you may want to pass in some variables to the container you can do so by adding the env key under the image key
    # the env variables you add here are specific to the env variables needed by the container, the other env variables you use in your pipeline stay the same 
    # all the steps will run as per normal but they will run inside a container thats been setup on the "runner "
    container:
      image: node:18
      env: {} # you can add container-specific env variables here

    # if you want to run some additional containers or services like a testing db you can do so by adding the services key - each service belongs to a job 
    # adding a service that runs a mongo db database 
    services:
      # tag or service name - you can call it anything
      mongo:
        # services will always run in a container so you need to specify the image you want to use
        image: mongo

        # The mongo db image needs 2 env variables in order to get setup and run properly as this controls which username and password will be used to connect to the db 
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}

    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!

      - name: Run tests
        run: npm test

      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
